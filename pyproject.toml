[project]
name = "fastapi_bootstrap"
requires-python = ">=3.11,<4.0"
dynamic = [ "version" ]
description = "A bootstrapped fastapi project, prioritizing clean architecture, testing, and easy deployment."
authors = [{name = "Michael VanDyke", email = "me@mjvandyke.com"}]
license = "MIT"
readme = "README.md"
keywords = ["fastapi", "bootstrap", "clean architecture", "testing", "IaC", "infrastructure as code", "deployment"]
dependencies = [
    "python-dotenv",
    "fastapi",
    "uvicorn",
    "pydantic",
    "pydantic-settings",
    "boto3",
    "aws-xray-sdk",
    "mangum",
    "opentelemetry-api",
    "opentelemetry-sdk",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-botocore",
    "opentelemetry-sdk-extension-aws",
    "opentelemetry-exporter-otlp",
    "click",
    "PyYAML",
    "rich",
    "aws-cdk-lib",
    "constructs",
    "cryptography",
    "docker",
    "requests",
    "tabulate",
]

[project.optional-dependencies]
sqlalchemy = ["opentelemetry-instrumentation-sqlalchemy"]
redis = ["opentelemetry-instrumentation-redis"]
mysql = ["opentelemetry-instrumentation-pymysql"]
all-instrumentation = [
    "opentelemetry-instrumentation-sqlalchemy",
    "opentelemetry-instrumentation-redis",
    "opentelemetry-instrumentation-pymysql",
]

[project.urls]
homepage = "https://github.com/mvdmakesthings/fastapi-bootstrap"
repository = "https://github.com/mvdmakesthings/fastapi-bootstrap"

[tool.poetry]
version = "0.1.0"
packages = [
    { include = "fastapi_bootstrap", from = "src" }
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

### -------- Development Dependencies --------
[tool.poetry.group.dev.dependencies]
ruff = "*"
codespell = "*"
poethepoet = "*"
pytest = "*"
httpx = "*"
pytest-cov = "*"

[tool.poetry.requires-plugins]
poethepoet = { version = "~0.34.0", extras = ["poetry_plugin"]}

### -------- CLI Entry Point --------
[project.scripts]
fastapi-bootstrap = "fastapi_bootstrap.cli.main:cli"

### -------- Automated Tasks ----------
[tool.poe.tasks]
lint = [
    { cmd = "ruff check ." },
    { cmd = "ruff check --select I ." },
    { cmd = "poetry check"}
]
spellcheck = "codespell --toml pyproject.toml"
fix = [
    { cmd = "poetry run ruff check --fix" },
    { cmd = "poetry run ruff check --select I --fix" },
    { cmd = "poetry run ruff format" },
    { cmd = "poetry run isort . --profile black" },
    { cmd = "poetry run codespell --toml pyproject.toml -w" },
]
version_bump_patch = "poetry version patch"
version_bump_minor = "poetry version minor"
version_bump_major = "poetry version major"
unittest = "poetry run pytest -v"

# Development tasks
dev = "python -m fastapi_bootstrap.cli dev start"
dev_stop = "python -m fastapi_bootstrap.cli dev stop"

# Infrastructure tasks
init = "python -m fastapi_bootstrap.cli init project"
infra_bootstrap = "python -m fastapi_bootstrap.cli infra bootstrap"
infra_deploy = "python -m fastapi_bootstrap.cli infra deploy"
infra_destroy = "python -m fastapi_bootstrap.cli infra destroy"

# Deployment tasks
deploy = "python -m fastapi_bootstrap.cli deploy app"

### -------- Development Tools --------
[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
